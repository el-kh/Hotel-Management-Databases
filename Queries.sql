-- Insert sample data into tables

INSERT INTO HotelOwner (owner_id, fName, lName, phone, salary)
VALUES (1, 'John', 'Doe', 123456789, 50000);

INSERT INTO Hotel (hotel_id, hotel_name, address, phone, email, webpage, stars, owner_id)
VALUES (1, 'Luxury Hotel', '123 Main St', 987654321, 'info@luxuryhotel.com', 'luxuryhotel.com', 5, 1);

INSERT INTO Department (dep_id, department_name, staffNumber)
VALUES (1, 'Front Desk', 10);

INSERT INTO Staff (member_id, firstName, LastName, phone, memberPosition, salary, hotel_id, dep_id)
VALUES (1, 'Alice', 'Smith', 1122334455, 'Receptionist', 30000, 1, 1);

INSERT INTO Room (roomNumber, roomType, price, roomStatus, capacity, hotel_id)
VALUES (101, 'Deluxe', 150, 'Available', 2, 1);

INSERT INTO Customer (customer_id, passport_id, firstName, LastName, dob, phone, email)
VALUES (1, 987654321, 'Bob', 'Brown', '1990-05-12', 5566778899, 'bob@example.com');

INSERT INTO RoomReserve (reserve_id, customer_id, roomNumber, checkin, checkout, total_price)
VALUES (1, 1, 101, '2024-06-01', '2024-06-05', 600);

INSERT INTO Payment (payment_id, customer_id, amount, method, payment_date, payment_status)
VALUES (1, 1, 600, 'Credit Card', '2024-06-01', 'Completed');

-- Retrieve all customers and their reservations
SELECT Customers.firstName, Customers.LastName, Room.roomType, RoomReserve.checkin, RoomReserve.checkout 
FROM Customers
JOIN RoomReserve ON Customers.customer_id = RoomReserve.customer_id
JOIN Room ON RoomReserve.roomNumber = Room.roomNumber;

-- Find total revenue generated by each hotel
SELECT Hotel.hotel_name, SUM(Payment.amount) AS total_revenue 
FROM Hotel
JOIN Room ON Hotel.hotel_id = Room.hotel_id
JOIN RoomReserve ON Room.roomNumber = RoomReserve.roomNumber
JOIN Payment ON RoomReserve.customer_id = Payment.customer_id
GROUP BY Hotel.hotel_name;

-- Count the number of rooms available in each hotel
SELECT Hotel.hotel_name, COUNT(Room.roomNumber) AS available_rooms 
FROM Hotel
JOIN Room ON Hotel.hotel_id = Room.hotel_id
WHERE Room.roomStatus = 'Available'
GROUP BY Hotel.hotel_name;

-- Find the highest-paid staff member
SELECT firstName, LastName, salary FROM Staff
ORDER BY salary DESC
LIMIT 1;

-- Retrieve all reservations that have checkouts in the next 7 days
SELECT * FROM RoomReserve 
WHERE checkout BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY);

-- Update room status after a checkout
UPDATE Room
SET roomStatus = 'Available'
WHERE roomNumber IN (
    SELECT roomNumber FROM RoomReserve
    WHERE checkout < CURDATE()
);

-- Delete reservations older than one year
DELETE FROM RoomReserve
WHERE checkout < DATE_SUB(CURDATE(), INTERVAL 1 YEAR);
